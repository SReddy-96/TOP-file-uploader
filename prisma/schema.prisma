// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Users {
  id       Int       @id @default(autoincrement())
  email    String    @unique @db.VarChar(100)
  username String    @unique @db.VarChar(100)
  password String
  created  DateTime  @default(now())
  updated  DateTime  @updatedAt
  role     Role      @default(USER)
  folders  Folders[]
  files    Files[]
}

model Folders {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  files     Files[]
  parent    Folders?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Folders[] @relation("FolderToFolder")
}

model Files {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  folder    Folders? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  Int?
}

enum Role {
  USER
  ADMIN
}
